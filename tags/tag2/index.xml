<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tag2 on Noumenon</title>
    <link>https://cicirori.github.io/tags/tag2/</link>
    <description>Recent content in Tag2 on Noumenon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Feb 2019 14:11:38 +0800</lastBuildDate>
    
	<atom:link href="https://cicirori.github.io/tags/tag2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>I/O模型总结</title>
      <link>https://cicirori.github.io/2019/02/i/o%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 20 Feb 2019 14:11:38 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/i/o%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;div class=&#34;alert warning &#34;&gt;
  &lt;p&gt;正在施工中&lt;/p&gt;
&lt;/div&gt;

&lt;!--toc--&gt;

&lt;h1 id=&#34;概览&#34;&gt;概览&lt;/h1&gt;

&lt;p&gt;最直觉的 I/O 模型是, 一个进程在同一时刻对一个文件描述符进行 I/O 操作, 每个 I/O 系统调用阻塞直至数据传输完成. 但是这种简单的阻塞式的 I/O 模型在很多场景下并不适用.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;尽可能不阻塞地检查一个文件描述符是能进行 I/O.&lt;/li&gt;
&lt;li&gt;监视多个文件描述符.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;于是乎, 就有了本文要讨论的这三种模型 :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I/O 多路复用 (select() 以及 poll() 系统调用)&lt;/li&gt;
&lt;li&gt;信号驱动 I/O&lt;/li&gt;
&lt;li&gt;Linux 特有的 epoll() API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这三种方式实际上都是为了实现同一个目标, 同时检查多个文件描述符, 查看他们是否准备好了执行 I/O 操作. 这里的准备好, 实际上指的是在这个文件描述符上执行的 I/O 是非阻塞的(包括返回错误), 因为模型只是对文件描述符检查, 而不进行数据传输.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>