<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Noumenon</title>
    <link>https://cicirori.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Noumenon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Mar 2019 15:06:51 +0800</lastBuildDate>
    
	<atom:link href="https://cicirori.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mod 运算总结</title>
      <link>https://cicirori.github.io/2019/03/mod-%E8%BF%90%E7%AE%97%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 10 Mar 2019 15:06:51 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/03/mod-%E8%BF%90%E7%AE%97%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;做一场笔试题的时候 case 只 pass 了 90%, 反复检查算法应该没有错, 但是题目要求对1000000007取余, 最后结果是&lt;code&gt;( a * 2^n) % 1000000007&lt;/code&gt;, 我直觉是&lt;code&gt;(a * (2^n % 1000000007) ) % 1000000007 != ( a * 2^n) % 1000000007&lt;/code&gt;的, 但是改了一下 pass 了. 做完和同学交流被告知&lt;code&gt;(a * (b % c) ) % c = (a * b) % c&lt;/code&gt;, 讲道理这个抽代学过的(同学说他们高中就学过 :)  但是现在忘了, shame on me, 正好最近看了一下负数参与模运算的一些规则, 就想总结一下.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>变量初始化</title>
      <link>https://cicirori.github.io/2019/03/%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Wed, 06 Mar 2019 14:21:22 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/03/%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;初始化&#34;&gt;初始化&lt;/h1&gt;

&lt;p&gt;总结一下, 就是非局部变量和线程局部变量先进行常量初始化, 没有的话进行零初始化. 分别发生在 main 执行前和 线程函数执行前.&lt;/p&gt;

&lt;p&gt;非局部变量, 进行默认初始化, 除了非POD会调用默认构造函数, 和数组递归默认初始化一下元素, 其他的都是 do nothing, 结果上来看就是变量值是随机的.&lt;/p&gt;

&lt;p&gt;另外构造函数列表初始化的时候, 初始化顺序和列表顺序无关,  处在同一个类内的变量和定义顺序有关, 处在不同类中的变量先基类.&lt;/p&gt;

&lt;p&gt;另外, const变量必须在构造函数初始化列表中初始化. static 成员变量必须在类外初始化.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>右值引用和std::move</title>
      <link>https://cicirori.github.io/2019/03/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E5%92%8Cstdmove/</link>
      <pubDate>Sat, 02 Mar 2019 22:50:39 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/03/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E5%92%8Cstdmove/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;移动语义&#34;&gt;移动语义&lt;/h1&gt;

&lt;p&gt;移动语义也是比较直觉的概念, 我们常见复制构造函数和复制赋值函数, 但是很多时候资源是独享的, 比如 I/O, 或者资源需要传递而不是复制. 这时候我们就需要工具, 实现使用源对象的资源来新建一个对象. 右值引用和 std::move 因此被引入.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>实现智能指针</title>
      <link>https://cicirori.github.io/2019/02/%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 25 Feb 2019 16:11:31 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;思路&#34;&gt;思路&lt;/h1&gt;

&lt;p&gt;核心是引用计数, 使用一个自定义的类来保存和管理引用计数. 需要实现指针类型的赋值构造函数, 拷贝构造函数, 析构函数,  &lt;code&gt;=,*,-&amp;gt;&lt;/code&gt;运算符, 为了管理不同的类型, 使用模板技术.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>动态内存、RAII和智能指针</title>
      <link>https://cicirori.github.io/2019/02/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98raii%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Sun, 24 Feb 2019 18:30:33 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98raii%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;动态内存&#34;&gt;动态内存&lt;/h1&gt;

&lt;p&gt;除了静态内存和栈(stack), 程序还拥有一个内存池, 被称为动态内存或者堆(heap). 由程序在运行时进行动态的管理.&lt;/p&gt;

&lt;p&gt;C++ 使用 new/delete 运算符进行动态内存上的对象管理. 使用 new/delete 直接对动态内存进行管理存在如下问题:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;忘记 delete 导致内存泄露.&lt;/li&gt;
&lt;li&gt;使用已经释放的对象, 通过释放后将指针置空有时可以检测出这种错误.&lt;/li&gt;
&lt;li&gt;同一块内存释放两次. 内存进行释放的时候会被归还给自由区域. 多次释放会破坏自由空间.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Makefile要点总结(下)</title>
      <link>https://cicirori.github.io/2019/02/makefile%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93%E4%B8%8B/</link>
      <pubDate>Tue, 19 Feb 2019 17:51:12 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/makefile%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93%E4%B8%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文来自阅读 &amp;ldquo;跟我一起写 Makefile&amp;rdquo; 一书时的摘抄, 有省略或者不明白的地方请参考原书.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--toc--&gt;

&lt;h1 id=&#34;使用条件判断&#34;&gt;使用条件判断&lt;/h1&gt;

&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;libs_for_gcc = -lgnu
normal_libs =
foo: $(objects)
ifeq ($(CC),gcc)
	$(CC) -o foo $(objects) $(libs_for_gcc)
else
	$(CC) -o foo $(objects) $(normal_libs)
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据 $(CC) 是不是 gcc 来决定要使用的库.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Makefile要点总结(上)</title>
      <link>https://cicirori.github.io/2019/02/makefile%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93%E4%B8%8A/</link>
      <pubDate>Tue, 19 Feb 2019 14:53:50 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/makefile%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93%E4%B8%8A/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文来自阅读 &amp;ldquo;跟我一起写 Makefile&amp;rdquo; 一书时的摘抄, 有省略或者不明白的地方请参考原书.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--toc--&gt;

&lt;h1 id=&#34;makefile-介绍&#34;&gt;Makefile 介绍&lt;/h1&gt;

&lt;p&gt;基本格式:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;target ... : prerequisites ...
	command
	...
	...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;核心规则:&lt;/p&gt;

&lt;p&gt;prerequisites 中如果有一个以上的文件比 target 文件要新的话, command 所定义的命令就会被执行.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>