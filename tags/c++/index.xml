<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Noumenon</title>
    <link>https://cicirori.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Noumenon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Feb 2019 16:11:31 +0800</lastBuildDate>
    
	<atom:link href="https://cicirori.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>实现智能指针</title>
      <link>https://cicirori.github.io/2019/02/%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 25 Feb 2019 16:11:31 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;思路&#34;&gt;思路&lt;/h1&gt;

&lt;p&gt;核心是引用计数, 使用一个自定义的类来保存和管理引用计数. 需要实现指针类型的赋值构造函数, 拷贝构造函数, 析构函数,  &lt;code&gt;=,*,-&amp;gt;&lt;/code&gt;运算符, 为了管理不同的类型, 使用模板技术.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>动态内存、RAII和智能指针</title>
      <link>https://cicirori.github.io/2019/02/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98raii%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Sun, 24 Feb 2019 18:30:33 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98raii%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;动态内存&#34;&gt;动态内存&lt;/h1&gt;

&lt;p&gt;除了静态内存和栈(stack), 程序还拥有一个内存池, 被称为动态内存或者堆(heap). 由程序在运行时进行动态的管理.&lt;/p&gt;

&lt;p&gt;C++ 使用 new/delete 运算符进行动态内存上的对象管理. 使用 new/delete 直接对动态内存进行管理存在如下问题:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;忘记 delete 导致内存泄露.&lt;/li&gt;
&lt;li&gt;使用已经释放的对象, 通过释放后将指针置空有时可以检测出这种错误.&lt;/li&gt;
&lt;li&gt;同一块内存释放两次. 内存进行释放的时候会被归还给自由区域. 多次释放会破坏自由空间.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>