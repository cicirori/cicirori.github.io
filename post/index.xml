<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Noumenon</title>
    <link>https://cicirori.github.io/post/</link>
    <description>Recent content in Posts on Noumenon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Mar 2019 22:22:09 +0800</lastBuildDate>
    
	<atom:link href="https://cicirori.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>虚拟化方法对比</title>
      <link>https://cicirori.github.io/2019/03/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Sat, 16 Mar 2019 22:22:09 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/03/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;虽然经常和 KVM 打交道, 但是对 KVM 的印象仅限于 kvm.ko 和 kvm-intel.ko 这两个 kernel module 和 VMExit 指令还有 QEMU 和 virt-manager. 对 KVM, OpenVZ 和 Xen 区别的了解也仅限于, OpenVZ 容易超售, KVM 能跑 BBR, Xen么&amp;hellip; 好像不怎么常见.&lt;/p&gt;

&lt;p&gt;今天大概了解了一下三种虚拟化的实现方式, 真的是大吃一惊, 没有想到看起来最老旧的, 选购 VPS 的时候避而远之的OpenVZ, 居然和当下火热的 Docker 一样都是基于 Linux 的container 机制, 瞬间有种失敬的感觉.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mod 运算总结</title>
      <link>https://cicirori.github.io/2019/03/mod-%E8%BF%90%E7%AE%97%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 10 Mar 2019 15:06:51 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/03/mod-%E8%BF%90%E7%AE%97%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;做一场笔试题的时候 case 只 pass 了 90%, 反复检查算法应该没有错, 但是题目要求对1000000007取余, 最后结果是&lt;code&gt;( a * 2^n) % 1000000007&lt;/code&gt;, 我直觉是&lt;code&gt;(a * (2^n % 1000000007) ) % 1000000007 != ( a * 2^n) % 1000000007&lt;/code&gt;的, 但是改了一下 pass 了. 做完和同学交流被告知&lt;code&gt;(a * (b % c) ) % c = (a * b) % c&lt;/code&gt;, 讲道理这个抽代学过的(同学说他们高中就学过 :)  但是现在忘了, shame on me, 正好最近看了一下负数参与模运算的一些规则, 就想总结一下.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>变量初始化</title>
      <link>https://cicirori.github.io/2019/03/%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Wed, 06 Mar 2019 14:21:22 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/03/%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;初始化&#34;&gt;初始化&lt;/h1&gt;

&lt;p&gt;总结一下, 就是非局部变量和线程局部变量先进行常量初始化, 没有的话进行零初始化. 分别发生在 main 执行前和 线程函数执行前.&lt;/p&gt;

&lt;p&gt;非局部变量, 进行默认初始化, 除了非POD会调用默认构造函数, 和数组递归默认初始化一下元素, 其他的都是 do nothing, 结果上来看就是变量值是随机的.&lt;/p&gt;

&lt;p&gt;另外构造函数列表初始化的时候, 初始化顺序和列表顺序无关,  处在同一个类内的变量和定义顺序有关, 处在不同类中的变量先基类.&lt;/p&gt;

&lt;p&gt;另外, const变量必须在构造函数初始化列表中初始化. static 成员变量必须在类外初始化.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>右值引用和std::move</title>
      <link>https://cicirori.github.io/2019/03/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E5%92%8Cstdmove/</link>
      <pubDate>Sat, 02 Mar 2019 22:50:39 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/03/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E5%92%8Cstdmove/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;移动语义&#34;&gt;移动语义&lt;/h1&gt;

&lt;p&gt;移动语义也是比较直觉的概念, 我们常见复制构造函数和复制赋值函数, 但是很多时候资源是独享的, 比如 I/O, 或者资源需要传递而不是复制. 这时候我们就需要工具, 实现使用源对象的资源来新建一个对象. 右值引用和 std::move 因此被引入.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>读「如何高效学习」</title>
      <link>https://cicirori.github.io/2019/02/%E8%AF%BB%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 26 Feb 2019 13:08:47 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/%E8%AF%BB%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;作者&#34;&gt;作者&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;　　斯科特·扬（Scott Young）1988年出生在加拿大，从高中开始放学后就几乎不学习，尽管如此，他还是以全班第二名的成绩毕业；读大学时，他每天学习一般不超过2个小时，但他的平均成绩保持在A以上；从加拿大马尼托巴大学商科毕业后，他用了一年时间，通过互联网完成了麻省理工学院计算机专业本科四年33门课程，节省了约合人民币150万元的大学学费，还登上了TED的讲台分享经验。&lt;/p&gt;

&lt;p&gt;　　这还不是最酷的。斯科特·扬还曾花一年时间去了4个国家，学习了4门外语，用30天学习肖像画。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作者斯科特杨的履历着实吸引人，直接让我有了读「如何高效学习」这本书的欲望。总结一下看下来的感觉，其实类比、比喻这种方法我有一段是非常厌恶，特别是有人用它来论证自己的观点时，只要出现类比的手法，逻辑链条直接断掉，让人直接没了想进一步交流的兴趣。对这一方法的绝对排斥，可能是我既对唯理论深信不疑，又难以摆脱经验论影响的产生的虚无主义救赎，简而言之就是哲学理论太初级。后来读康德，解决了我很多疑惑，而斯科特杨的获取、理解、拓展、纠错和应用正好和康德对自然立法的理念相似，当然省略了绝大多数的细节，这也是一个理论想要得到合适的应用性而不得不妥协的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>实现智能指针</title>
      <link>https://cicirori.github.io/2019/02/%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 25 Feb 2019 16:11:31 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;思路&#34;&gt;思路&lt;/h1&gt;

&lt;p&gt;核心是引用计数, 使用一个自定义的类来保存和管理引用计数. 需要实现指针类型的赋值构造函数, 拷贝构造函数, 析构函数,  &lt;code&gt;=,*,-&amp;gt;&lt;/code&gt;运算符, 为了管理不同的类型, 使用模板技术.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>动态内存、RAII和智能指针</title>
      <link>https://cicirori.github.io/2019/02/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98raii%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Sun, 24 Feb 2019 18:30:33 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98raii%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;动态内存&#34;&gt;动态内存&lt;/h1&gt;

&lt;p&gt;除了静态内存和栈(stack), 程序还拥有一个内存池, 被称为动态内存或者堆(heap). 由程序在运行时进行动态的管理.&lt;/p&gt;

&lt;p&gt;C++ 使用 new/delete 运算符进行动态内存上的对象管理. 使用 new/delete 直接对动态内存进行管理存在如下问题:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;忘记 delete 导致内存泄露.&lt;/li&gt;
&lt;li&gt;使用已经释放的对象, 通过释放后将指针置空有时可以检测出这种错误.&lt;/li&gt;
&lt;li&gt;同一块内存释放两次. 内存进行释放的时候会被归还给自由区域. 多次释放会破坏自由空间.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>I/O模型总结</title>
      <link>https://cicirori.github.io/2019/02/i/o%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 20 Feb 2019 14:11:38 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/i/o%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;!--toc--&gt;

&lt;h1 id=&#34;概览&#34;&gt;概览&lt;/h1&gt;

&lt;p&gt;最直觉的 I/O 模型是, 一个进程在同一时刻对一个文件描述符进行 I/O 操作, 每个 I/O 系统调用阻塞直至数据传输完成. 但是这种简单的阻塞式的 I/O 模型在很多场景下并不适用.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;尽可能不阻塞地检查一个文件描述符是能进行 I/O.&lt;/li&gt;
&lt;li&gt;监视多个文件描述符.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;于是乎, 就有了本文要讨论的这三种模型 :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I/O 多路复用 (select() 以及 poll() 系统调用)&lt;/li&gt;
&lt;li&gt;信号驱动 I/O&lt;/li&gt;
&lt;li&gt;Linux 特有的 epoll() API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这三种方式实际上都是为了实现同一个目标, 同时检查多个文件描述符, 查看他们是否准备好了执行 I/O 操作. 这里的准备好, 实际上指的是在这个文件描述符上执行的 I/O 是非阻塞的(包括返回错误), 因为模型只是对文件描述符检查, 而不进行数据传输.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Makefile要点总结(下)</title>
      <link>https://cicirori.github.io/2019/02/makefile%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93%E4%B8%8B/</link>
      <pubDate>Tue, 19 Feb 2019 17:51:12 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/makefile%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93%E4%B8%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文来自阅读 &amp;ldquo;跟我一起写 Makefile&amp;rdquo; 一书时的摘抄, 有省略或者不明白的地方请参考原书.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--toc--&gt;

&lt;h1 id=&#34;使用条件判断&#34;&gt;使用条件判断&lt;/h1&gt;

&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;libs_for_gcc = -lgnu
normal_libs =
foo: $(objects)
ifeq ($(CC),gcc)
	$(CC) -o foo $(objects) $(libs_for_gcc)
else
	$(CC) -o foo $(objects) $(normal_libs)
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据 $(CC) 是不是 gcc 来决定要使用的库.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Makefile要点总结(上)</title>
      <link>https://cicirori.github.io/2019/02/makefile%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93%E4%B8%8A/</link>
      <pubDate>Tue, 19 Feb 2019 14:53:50 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2019/02/makefile%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93%E4%B8%8A/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文来自阅读 &amp;ldquo;跟我一起写 Makefile&amp;rdquo; 一书时的摘抄, 有省略或者不明白的地方请参考原书.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--toc--&gt;

&lt;h1 id=&#34;makefile-介绍&#34;&gt;Makefile 介绍&lt;/h1&gt;

&lt;p&gt;基本格式:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;target ... : prerequisites ...
	command
	...
	...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;核心规则:&lt;/p&gt;

&lt;p&gt;prerequisites 中如果有一个以上的文件比 target 文件要新的话, command 所定义的命令就会被执行.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Manjaro安装配置踩坑</title>
      <link>https://cicirori.github.io/2018/12/manjaro%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/</link>
      <pubDate>Thu, 06 Dec 2018 17:07:14 +0800</pubDate>
      
      <guid>https://cicirori.github.io/2018/12/manjaro%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/</guid>
      <description>&lt;p&gt;其实manjaro和arch的英文社区上都讲的很清楚, 推荐看英文原版资料.&lt;/p&gt;

&lt;!-- toc --&gt;

&lt;h1 id=&#34;制作usb安装器&#34;&gt;制作USB安装器&lt;/h1&gt;

&lt;p&gt;参考资料 : Manjaro 官方User Guide&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;官网下载镜像&lt;/li&gt;
&lt;li&gt;Linux下推荐通过命令行制作

&lt;ol&gt;
&lt;li&gt;插上用于制作安装盘的U盘&lt;/li&gt;
&lt;li&gt;查看U盘盘符. &lt;code&gt;sudo fdisk -l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;写入镜像:
&lt;code&gt;sudo dd if=manjaro-*.iso of=/dev/(替换成你查到的盘符) bs=4M&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Windows推荐使用Rufus:

&lt;ol&gt;
&lt;li&gt;选择你要用于制作安装盘的U盘.&lt;/li&gt;
&lt;li&gt;在Boot selection,  点击Select选择下载的Manjaro镜像, 点击Start, 然后在出现的窗口中选择DD Image 方式.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>设计分布式系统读书笔记（五）</title>
      <link>https://cicirori.github.io/2018/09/%E8%AE%BE%E8%AE%A1%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%94/</link>
      <pubDate>Tue, 25 Sep 2018 19:29:16 +0000</pubDate>
      
      <guid>https://cicirori.github.io/2018/09/%E8%AE%BE%E8%AE%A1%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%94/</guid>
      <description>&lt;!-- toc --&gt;

&lt;h1 id=&#34;函数与事件驱动处理&#34;&gt;函数与事件驱动处理&lt;/h1&gt;

&lt;p&gt;我们之前看到的系统设计都是为了长期运行的功能，服务器总是在线，这些模式对于那些处于高负载，占据大量内存和磁盘的服务来说是合适的。但是还有一类应用，可能需要在线的时间很短，或者只需要处理单一请求，或者只需要对每个时间响应。这种类型的请求或者叫事件驱动应用设计最近在大规模公有云上非常流行，厂家为此提出了FaaS（函数/功能即服务）。时间再往后推一点的最近，FaaS在私有云或者物理机器上也开始流行。&lt;/p&gt;

&lt;p&gt;大多数时FaaS指无服务器（Serverless）计算，这么说也没什么错，但是广义的无服务计算和事件驱动FaaS并不是完全相同的概念。比如一个多用户容器（CaaS）是无服务器的，但是不是事件驱动的。一个开源的FaaS跑在你自己拥有管理的物理机上，这是事件驱动的但不是无服务器的。理解这两者的区别可以让你了解什么时候该使用事件驱动什么时候该使用无服务器，或者什么时候两者并用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计分布式系统读书笔记(四)</title>
      <link>https://cicirori.github.io/2018/09/%E8%AE%BE%E8%AE%A1%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%9B%9B/</link>
      <pubDate>Mon, 17 Sep 2018 19:02:46 +0000</pubDate>
      
      <guid>https://cicirori.github.io/2018/09/%E8%AE%BE%E8%AE%A1%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%9B%9B/</guid>
      <description>&lt;!-- toc --&gt;

&lt;h1 id=&#34;服务器模式&#34;&gt;服务器模式&lt;/h1&gt;

&lt;h2 id=&#34;分片服务&#34;&gt;分片服务&lt;/h2&gt;

&lt;p&gt;和副本服务不同的是，副本服务的每个副本都具有完整的功能，可以响应每一个请求，分片服务中每个分片只能服务请求的一个子集，请求由一个负载均衡节点或者叫根节点分配到对应的分片。两种模式的不同如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cicirori/my_pic_for_markdown/master/Screenshot_20180917_191805.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;复制模式通常用来构建无状态服务，分片模式用来构建有状态服务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计分布式系统读书笔记（三）</title>
      <link>https://cicirori.github.io/2018/09/%E8%AE%BE%E8%AE%A1%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%89/</link>
      <pubDate>Thu, 13 Sep 2018 11:32:52 +0000</pubDate>
      
      <guid>https://cicirori.github.io/2018/09/%E8%AE%BE%E8%AE%A1%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%89/</guid>
      <description>&lt;!-- toc --&gt;

&lt;h1 id=&#34;服务器模式&#34;&gt;服务器模式&lt;/h1&gt;

&lt;h2 id=&#34;微服务&#34;&gt;微服务&lt;/h2&gt;

&lt;p&gt;最近微服务变成了一个描述多节点分布式软件架构的流行词，微服务描述了一个系统由运行在不同进程上的组件组成，批次之间通过预定义的API进行交流。与微服务相对应的概念是宏系统，把所有的功能紧凑的放在一个应用中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cicirori/my_pic_for_markdown/master/Screenshot_20180913_102535.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;微服务有各种各样的好处，大多数情况下，微服务兼具可靠性和灵活性。微服务把一个应用分解成小片，每个小片专注于提供一种服务。这种模式有利于减小开发团队大小，使得开发更加灵活有方向性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计分布式系统读书笔记（二）</title>
      <link>https://cicirori.github.io/2018/09/%E8%AE%BE%E8%AE%A1%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Wed, 12 Sep 2018 20:36:10 +0000</pubDate>
      
      <guid>https://cicirori.github.io/2018/09/%E8%AE%BE%E8%AE%A1%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <description>&lt;!-- toc --&gt;

&lt;h1 id=&#34;大使模式&#34;&gt;大使模式&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cicirori/my_pic_for_markdown/master/Screenshot_20180912_194022.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上图显示了一个典型的大使模式架构。大使模式的价值在于两点，首先构建一个模块化可复用的容器本身就具有价值，其次一个大使容器可以供多个应用容器使用，这种复用加快了开发进度也利于保证代码质量。我们接下来会提供大使模式的几个例子。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[转自Reddit]Anki英文卡组搜集</title>
      <link>https://cicirori.github.io/2018/08/%E8%BD%AC%E8%87%AAredditanki%E8%8B%B1%E6%96%87%E5%8D%A1%E7%BB%84%E6%90%9C%E9%9B%86/</link>
      <pubDate>Thu, 23 Aug 2018 13:44:13 +0000</pubDate>
      
      <guid>https://cicirori.github.io/2018/08/%E8%BD%AC%E8%87%AAredditanki%E8%8B%B1%E6%96%87%E5%8D%A1%E7%BB%84%E6%90%9C%E9%9B%86/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/Anki/comments/6z57zk/anki_decks_collection_mostly_englishenglish/&#34;&gt;https://www.reddit.com/r/Anki/comments/6z57zk/anki_decks_collection_mostly_englishenglish/&lt;/a&gt;&lt;/p&gt;

&lt;!-- toc --&gt;

&lt;h1 id=&#34;decks&#34;&gt;Decks&lt;/h1&gt;

&lt;h2 id=&#34;podcasts&#34;&gt;Podcasts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ankiweb.net/shared/info/38858607&#34;&gt;The English We Speak&lt;/a&gt; (345 notes)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ankiweb.net/shared/info/1106074514&#34;&gt;6 Minute English&lt;/a&gt; (153 notes)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>设计分布式系统读书笔记（一）</title>
      <link>https://cicirori.github.io/2018/08/%E8%AE%BE%E8%AE%A1%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Thu, 23 Aug 2018 09:09:45 +0000</pubDate>
      
      <guid>https://cicirori.github.io/2018/08/%E8%AE%BE%E8%AE%A1%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>&lt;!-- toc --&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;h2 id=&#34;软件开发模式简史&#34;&gt;软件开发模式简史&lt;/h2&gt;

&lt;h3 id=&#34;算法编程的形式化&#34;&gt;算法编程的形式化&lt;/h3&gt;

&lt;p&gt;1962年，计算机编程的艺术一书横空出世，揭开了计算机科学发展的新篇章。本书谈论了算法本身，而不是面向某个特定程序的code。&lt;/p&gt;

&lt;h3 id=&#34;oop&#34;&gt;OOP&lt;/h3&gt;

&lt;p&gt;随着计算机软件变得复杂，开发软件的人员逐渐增多。为了解决这个问题，OOP思想出现了。&lt;/p&gt;

&lt;h3 id=&#34;开源软件的崛起&#34;&gt;开源软件的崛起&lt;/h3&gt;

&lt;p&gt;可能开源软件和分布式系统在开发模式上只有很小的相关，但是值得注意的是，现在所有的container技术都是由开源社区作为主要推动力的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于三段论</title>
      <link>https://cicirori.github.io/2018/03/%E5%85%B3%E4%BA%8E%E4%B8%89%E6%AE%B5%E8%AE%BA/</link>
      <pubDate>Sun, 18 Mar 2018 23:32:44 +0000</pubDate>
      
      <guid>https://cicirori.github.io/2018/03/%E5%85%B3%E4%BA%8E%E4%B8%89%E6%AE%B5%E8%AE%BA/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;三段论&lt;/strong&gt;在&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BC%A0%E7%BB%9F%E9%80%BB%E8%BE%91&#34;&gt;传统逻辑&lt;/a&gt;中，是在其中一个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%91%BD%E9%A2%98&#34;&gt;命题&lt;/a&gt;（&lt;strong&gt;结论&lt;/strong&gt;）必然地从另外两个命题（叫做&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%89%8D%E6%8F%90&#34;&gt;前提&lt;/a&gt;）中得出的一种&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%8E%A8%E8%AE%BA&#34;&gt;推论&lt;/a&gt;。这个定义是传统的，可以宽松地从&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%9A%E9%87%8C%E5%A3%AB%E5%A4%9A%E5%BE%B7&#34;&gt;亚里士多德&lt;/a&gt;的《&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=%E5%89%8D%E5%88%86%E6%9E%90%E7%AF%87&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;前分析篇&lt;/a&gt;》Book I, c. 1中推出来。希腊语“sullogismos”的意思是“演绎”。对传统意义上的三段论的详细描述参见&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%A8%80%E4%B8%89%E6%AE%B5%E8%AE%BA&#34;&gt;直言三段论&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;三段论由三个部分组成：&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=%E5%A4%A7%E5%89%8D%E6%8F%90&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;大前提&lt;/a&gt;、&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=%E5%B0%8F%E5%89%8D%E6%8F%90&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;小前提&lt;/a&gt;和结论，它在逻辑上是从大前提和小前提得出来的。大前提是一般性的原则。小前提是一个特殊陈述。在逻辑上，结论是从应用大前提于小前提之上得到的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上是维基百科对三段论的定义。大前提、小前提和结论，在我人生的前二十年一直没有怀疑过这个理论的正确性，甚至没有产生过一丝怀疑，这一切都是那么自然，就如同是不是不是（being is not is-not）一样（这个是黑格尔在他的《逻辑学》里搞辩证法的时候讲到的东西，有机会再和你们扯）。我一直觉得亚里士多德就凭这一个成就，就足以盖过他在各科教科书中干过的所有傻事（其实也都真不傻）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用GCP负载平衡实现IPv6的shadowsocks</title>
      <link>https://cicirori.github.io/2018/03/%E5%88%A9%E7%94%A8gcp%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1%E5%AE%9E%E7%8E%B0ipv6%E7%9A%84shadowsocks/</link>
      <pubDate>Sun, 18 Mar 2018 20:11:30 +0000</pubDate>
      
      <guid>https://cicirori.github.io/2018/03/%E5%88%A9%E7%94%A8gcp%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1%E5%AE%9E%E7%8E%B0ipv6%E7%9A%84shadowsocks/</guid>
      <description>&lt;!-- toc --&gt;

&lt;h1 id=&#34;shadowsocks-配置&#34;&gt;Shadowsocks 配置&lt;/h1&gt;

&lt;p&gt;端口设置为GCP TCP负载平衡支持的端口, 比如5222.&lt;/p&gt;

&lt;h1 id=&#34;gcp的负载平衡&#34;&gt;GCP的负载平衡&lt;/h1&gt;

&lt;p&gt;先建立一个实例组, 把要用的VM加进去.&lt;/p&gt;

&lt;p&gt;使用TCP负载均衡-从互联网到我的VM-多个区域(单个区域貌似会有点问题), 然后基本的配置都是默认, 前端IP选择v6就可以.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>